/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Nonsense_Input {
    pub data: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_Nonsense_Input() {
    assert_eq!(
        ::std::mem::size_of::<Nonsense_Input>(),
        4usize,
        concat!("Size of: ", stringify!(Nonsense_Input))
    );
    assert_eq!(
        ::std::mem::align_of::<Nonsense_Input>(),
        4usize,
        concat!("Alignment of ", stringify!(Nonsense_Input))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Nonsense_Input>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Nonsense_Input),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN8Nonsense3AskERKNS_5InputE"]
    pub fn Nonsense_Ask(question: *const Nonsense_Input) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN8Nonsense6UnusedEv"]
    pub fn Nonsense_Unused() -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Math_Arithmetic {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_Math_Arithmetic() {
    assert_eq!(
        ::std::mem::size_of::<Math_Arithmetic>(),
        1usize,
        concat!("Size of: ", stringify!(Math_Arithmetic))
    );
    assert_eq!(
        ::std::mem::align_of::<Math_Arithmetic>(),
        1usize,
        concat!("Alignment of ", stringify!(Math_Arithmetic))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4Math10Arithmetic3AddEdd"]
    pub fn Math_Arithmetic_Add(a: f64, b: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN4Math10Arithmetic8SubtractEdd"]
    pub fn Math_Arithmetic_Subtract(a: f64, b: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN4Math10Arithmetic8MultiplyEdd"]
    pub fn Math_Arithmetic_Multiply(a: f64, b: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ZN4Math10Arithmetic6DivideEdd"]
    pub fn Math_Arithmetic_Divide(a: f64, b: f64) -> f64;
}
impl Math_Arithmetic {
    #[inline]
    pub unsafe fn Add(a: f64, b: f64) -> f64 {
        Math_Arithmetic_Add(a, b)
    }
    #[inline]
    pub unsafe fn Subtract(a: f64, b: f64) -> f64 {
        Math_Arithmetic_Subtract(a, b)
    }
    #[inline]
    pub unsafe fn Multiply(a: f64, b: f64) -> f64 {
        Math_Arithmetic_Multiply(a, b)
    }
    #[inline]
    pub unsafe fn Divide(a: f64, b: f64) -> f64 {
        Math_Arithmetic_Divide(a, b)
    }
}
